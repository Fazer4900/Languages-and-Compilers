//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Fazer4900\Desktop\New folder (2)\PLC_Lab7\PLC_Lab7\PLC_Lab7_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab7 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab7_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, ADD=7, SUB=8, MUL=9, DIV=10, 
		MOD=11, CONCAT=12, AND=13, OR=14, GT=15, LT=16, EQ=17, NOTEQ=18, NOT=19, 
		ASSIGNMENT=20, IF=21, ELSE=22, WHILE=23, READ=24, WRITE=25, SEMICOLON=26, 
		L_PAR=27, R_PAR=28, COLON=29, FLOAT=30, INT=31, BOOL=32, STRING=33, OCT=34, 
		HEXA=35, COMMENT=36, WS=37, ID=38;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_emptyStatement = 2, RULE_declarationStatement = 3, 
		RULE_assignmentStatement = 4, RULE_expStatement = 5, RULE_readStatement = 6, 
		RULE_writeStatement = 7, RULE_exprList = 8, RULE_blockStatement = 9, RULE_ifStatement = 10, 
		RULE_whileStatement = 11, RULE_exp = 12, RULE_type = 13, RULE_literal = 14;
	public static readonly string[] ruleNames = {
		"program", "statement", "emptyStatement", "declarationStatement", "assignmentStatement", 
		"expStatement", "readStatement", "writeStatement", "exprList", "blockStatement", 
		"ifStatement", "whileStatement", "exp", "type", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'int'", "'string'", "'float'", "'bool'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'.'", "'&&'", "'||'", "'>'", "'<'", "'=='", "'!='", 
		"'!'", "'='", "'if'", "'else'", "'while'", "'read'", "'write'", "';'", 
		"'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "ADD", "SUB", "MUL", "DIV", 
		"MOD", "CONCAT", "AND", "OR", "GT", "LT", "EQ", "NOTEQ", "NOT", "ASSIGNMENT", 
		"IF", "ELSE", "WHILE", "READ", "WRITE", "SEMICOLON", "L_PAR", "R_PAR", 
		"COLON", "FLOAT", "INT", "BOOL", "STRING", "OCT", "HEXA", "COMMENT", "WS", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab7_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab7_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << SUB) | (1L << NOT) | (1L << IF) | (1L << WHILE) | (1L << READ) | (1L << WRITE) | (1L << SEMICOLON) | (1L << L_PAR) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << OCT) | (1L << HEXA) | (1L << ID))) != 0)) {
				{
				{
				State = 30; statement();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public ExpStatementContext expStatement() {
			return GetRuleContext<ExpStatementContext>(0);
		}
		public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 45;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; emptyStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; declarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; assignmentStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; expStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 40; readStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 41; writeStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 42; blockStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 43; ifStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 44; whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(PLC_Lab7_exprParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(PLC_Lab7_exprParser.COLON, i);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; type();
			State = 50; Match(ID);
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COLON) {
				{
				{
				State = 51; Match(COLON);
				State = 52; Match(ID);
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 58; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public ITerminalNode[] ASSIGNMENT() { return GetTokens(PLC_Lab7_exprParser.ASSIGNMENT); }
		public ITerminalNode ASSIGNMENT(int i) {
			return GetToken(PLC_Lab7_exprParser.ASSIGNMENT, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(ID);
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 65;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 61; Match(ASSIGNMENT);
					State = 62; Match(ID);
					}
					break;

				case 2:
					{
					State = 63; Match(ASSIGNMENT);
					State = 64; exp(0);
					}
					break;
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASSIGNMENT );
			State = 69; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpStatementContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public ExpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterExpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitExpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpStatementContext expStatement() {
		ExpStatementContext _localctx = new ExpStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_expStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; exp(0);
			State = 72; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		public ITerminalNode READ() { return GetToken(PLC_Lab7_exprParser.READ, 0); }
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(PLC_Lab7_exprParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(PLC_Lab7_exprParser.COLON, i);
		}
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_readStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(READ);
			State = 75; Match(ID);
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COLON) {
				{
				{
				State = 76; Match(COLON);
				State = 77; Match(ID);
				}
				}
				State = 82;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 83; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(PLC_Lab7_exprParser.WRITE, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PLC_Lab7_exprParser.SEMICOLON, 0); }
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_writeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(WRITE);
			State = 86; exprList();
			State = 87; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(PLC_Lab7_exprParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(PLC_Lab7_exprParser.COLON, i);
		}
		public ITerminalNode[] ID() { return GetTokens(PLC_Lab7_exprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PLC_Lab7_exprParser.ID, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; exp(0);
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COLON) {
				{
				{
				State = 90; Match(COLON);
				State = 93;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 91; exp(0);
					}
					break;

				case 2:
					{
					State = 92; Match(ID);
					}
					break;
				}
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__0);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 101; statement();
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << SUB) | (1L << NOT) | (1L << IF) | (1L << WHILE) | (1L << READ) | (1L << WRITE) | (1L << SEMICOLON) | (1L << L_PAR) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << OCT) | (1L << HEXA) | (1L << ID))) != 0) );
			State = 106; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(PLC_Lab7_exprParser.IF, 0); }
		public ITerminalNode L_PAR() { return GetToken(PLC_Lab7_exprParser.L_PAR, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode R_PAR() { return GetToken(PLC_Lab7_exprParser.R_PAR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(PLC_Lab7_exprParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(IF);
			State = 109; Match(L_PAR);
			State = 110; exp(0);
			State = 111; Match(R_PAR);
			State = 112; statement();
			State = 115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 113; Match(ELSE);
				State = 114; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(PLC_Lab7_exprParser.WHILE, 0); }
		public ITerminalNode L_PAR() { return GetToken(PLC_Lab7_exprParser.L_PAR, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode R_PAR() { return GetToken(PLC_Lab7_exprParser.R_PAR, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(WHILE);
			State = 118; Match(L_PAR);
			State = 119; exp(0);
			State = 120; Match(R_PAR);
			State = 121; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisContext : ExpContext {
		public ITerminalNode L_PAR() { return GetToken(PLC_Lab7_exprParser.L_PAR, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode R_PAR() { return GetToken(PLC_Lab7_exprParser.R_PAR, 0); }
		public ParenthesisContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(PLC_Lab7_exprParser.MUL, 0); }
		public MultiplicationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(PLC_Lab7_exprParser.DIV, 0); }
		public DivisionContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(PLC_Lab7_exprParser.MOD, 0); }
		public ModuloContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(PLC_Lab7_exprParser.ADD, 0); }
		public AdditionContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(PLC_Lab7_exprParser.SUB, 0); }
		public SubtractionContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(PLC_Lab7_exprParser.EQ, 0); }
		public EqualContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode GT() { return GetToken(PLC_Lab7_exprParser.GT, 0); }
		public GreaterContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterGreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitGreater(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode LT() { return GetToken(PLC_Lab7_exprParser.LT, 0); }
		public SmallerContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterSmaller(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitSmaller(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmaller(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotequalContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NOTEQ() { return GetToken(PLC_Lab7_exprParser.NOTEQ, 0); }
		public NotequalContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterNotequal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitNotequal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotequal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAndContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PLC_Lab7_exprParser.AND, 0); }
		public BinaryAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterBinaryAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitBinaryAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOrContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode OR() { return GetToken(PLC_Lab7_exprParser.OR, 0); }
		public BinaryOrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterBinaryOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitBinaryOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CONCAT() { return GetToken(PLC_Lab7_exprParser.CONCAT, 0); }
		public ConcatenateContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterConcatenate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitConcatenate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExpContext {
		public ITerminalNode SUB() { return GetToken(PLC_Lab7_exprParser.SUB, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnaryMinusContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotContext : ExpContext {
		public ITerminalNode NOT() { return GetToken(PLC_Lab7_exprParser.NOT, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public LogicNotContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterLogicNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitLogicNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDContext : ExpContext {
		public ITerminalNode ID() { return GetToken(PLC_Lab7_exprParser.ID, 0); }
		public IDContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case L_PAR:
				{
				_localctx = new ParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 124; Match(L_PAR);
				State = 125; exp(0);
				State = 126; Match(R_PAR);
				}
				break;
			case SUB:
				{
				_localctx = new UnaryMinusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 128; Match(SUB);
				State = 129; exp(4);
				}
				break;
			case NOT:
				{
				_localctx = new LogicNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 130; Match(NOT);
				State = 131; exp(3);
				}
				break;
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case OCT:
			case HEXA:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 132; literal();
				}
				break;
			case ID:
				{
				_localctx = new IDContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 133; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 174;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 172;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 136;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 137; Match(MUL);
						State = 138; exp(17);
						}
						break;

					case 2:
						{
						_localctx = new DivisionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 139;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 140; Match(DIV);
						State = 141; exp(16);
						}
						break;

					case 3:
						{
						_localctx = new ModuloContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 142;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 143; Match(MOD);
						State = 144; exp(15);
						}
						break;

					case 4:
						{
						_localctx = new AdditionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 145;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 146; Match(ADD);
						State = 147; exp(14);
						}
						break;

					case 5:
						{
						_localctx = new SubtractionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 148;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 149; Match(SUB);
						State = 150; exp(13);
						}
						break;

					case 6:
						{
						_localctx = new EqualContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 151;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 152; Match(EQ);
						State = 153; exp(12);
						}
						break;

					case 7:
						{
						_localctx = new GreaterContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 154;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 155; Match(GT);
						State = 156; exp(11);
						}
						break;

					case 8:
						{
						_localctx = new SmallerContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 157;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 158; Match(LT);
						State = 159; exp(10);
						}
						break;

					case 9:
						{
						_localctx = new NotequalContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 160;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 161; Match(NOTEQ);
						State = 162; exp(9);
						}
						break;

					case 10:
						{
						_localctx = new BinaryAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 163;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 164; Match(AND);
						State = 165; exp(8);
						}
						break;

					case 11:
						{
						_localctx = new BinaryOrContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 166;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 167; Match(OR);
						State = 168; exp(7);
						}
						break;

					case 12:
						{
						_localctx = new ConcatenateContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 169;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 170; Match(CONCAT);
						State = 171; exp(6);
						}
						break;
					}
					} 
				}
				State = 176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab7_exprParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(PLC_Lab7_exprParser.INT, 0); }
		public ITerminalNode BOOL() { return GetToken(PLC_Lab7_exprParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(PLC_Lab7_exprParser.STRING, 0); }
		public ITerminalNode OCT() { return GetToken(PLC_Lab7_exprParser.OCT, 0); }
		public ITerminalNode HEXA() { return GetToken(PLC_Lab7_exprParser.HEXA, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab7_exprListener typedListener = listener as IPLC_Lab7_exprListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab7_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab7_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << OCT) | (1L << HEXA))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 16);

		case 1: return Precpred(_ctx, 15);

		case 2: return Precpred(_ctx, 14);

		case 3: return Precpred(_ctx, 13);

		case 4: return Precpred(_ctx, 12);

		case 5: return Precpred(_ctx, 11);

		case 6: return Precpred(_ctx, 10);

		case 7: return Precpred(_ctx, 9);

		case 8: return Precpred(_ctx, 8);

		case 9: return Precpred(_ctx, 7);

		case 10: return Precpred(_ctx, 6);

		case 11: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\xB8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\a\x2\"\n\x2\f\x2\xE\x2%\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x30\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\a\x5\x38\n\x5\f\x5\xE\x5;\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x6\x6\x44\n\x6\r\x6\xE\x6\x45\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\a\bQ\n\b\f\b\xE\bT\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\n\x3\n\x3\n\x3\n\x5\n`\n\n\a\n\x62\n\n\f\n\xE\n\x65\v\n\x3\v\x3\v"+
		"\x6\vi\n\v\r\v\xE\vj\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"v\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x89\n\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xAF\n\xE\f"+
		"\xE\xE\xE\xB2\v\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x2\x2\x3\x1A\x11\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2\x2\x4\x3\x2\x5\b\x3\x2 %\xC9\x2#\x3\x2\x2\x2\x4"+
		"/\x3\x2\x2\x2\x6\x31\x3\x2\x2\x2\b\x33\x3\x2\x2\x2\n>\x3\x2\x2\x2\fI\x3"+
		"\x2\x2\x2\xEL\x3\x2\x2\x2\x10W\x3\x2\x2\x2\x12[\x3\x2\x2\x2\x14\x66\x3"+
		"\x2\x2\x2\x16n\x3\x2\x2\x2\x18w\x3\x2\x2\x2\x1A\x88\x3\x2\x2\x2\x1C\xB3"+
		"\x3\x2\x2\x2\x1E\xB5\x3\x2\x2\x2 \"\x5\x4\x3\x2! \x3\x2\x2\x2\"%\x3\x2"+
		"\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\x3\x3\x2\x2\x2%#\x3\x2\x2\x2&\x30"+
		"\x5\x6\x4\x2\'\x30\x5\b\x5\x2(\x30\x5\n\x6\x2)\x30\x5\f\a\x2*\x30\x5\xE"+
		"\b\x2+\x30\x5\x10\t\x2,\x30\x5\x14\v\x2-\x30\x5\x16\f\x2.\x30\x5\x18\r"+
		"\x2/&\x3\x2\x2\x2/\'\x3\x2\x2\x2/(\x3\x2\x2\x2/)\x3\x2\x2\x2/*\x3\x2\x2"+
		"\x2/+\x3\x2\x2\x2/,\x3\x2\x2\x2/-\x3\x2\x2\x2/.\x3\x2\x2\x2\x30\x5\x3"+
		"\x2\x2\x2\x31\x32\a\x1C\x2\x2\x32\a\x3\x2\x2\x2\x33\x34\x5\x1C\xF\x2\x34"+
		"\x39\a(\x2\x2\x35\x36\a\x1F\x2\x2\x36\x38\a(\x2\x2\x37\x35\x3\x2\x2\x2"+
		"\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;"+
		"\x39\x3\x2\x2\x2<=\a\x1C\x2\x2=\t\x3\x2\x2\x2>\x43\a(\x2\x2?@\a\x16\x2"+
		"\x2@\x44\a(\x2\x2\x41\x42\a\x16\x2\x2\x42\x44\x5\x1A\xE\x2\x43?\x3\x2"+
		"\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46G\x3\x2\x2\x2GH\a\x1C\x2\x2H\v\x3\x2\x2\x2IJ\x5\x1A"+
		"\xE\x2JK\a\x1C\x2\x2K\r\x3\x2\x2\x2LM\a\x1A\x2\x2MR\a(\x2\x2NO\a\x1F\x2"+
		"\x2OQ\a(\x2\x2PN\x3\x2\x2\x2QT\x3\x2\x2\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2"+
		"SU\x3\x2\x2\x2TR\x3\x2\x2\x2UV\a\x1C\x2\x2V\xF\x3\x2\x2\x2WX\a\x1B\x2"+
		"\x2XY\x5\x12\n\x2YZ\a\x1C\x2\x2Z\x11\x3\x2\x2\x2[\x63\x5\x1A\xE\x2\\_"+
		"\a\x1F\x2\x2]`\x5\x1A\xE\x2^`\a(\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\x62"+
		"\x3\x2\x2\x2\x61\\\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\x13\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66h\a\x3"+
		"\x2\x2gi\x5\x4\x3\x2hg\x3\x2\x2\x2ij\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2"+
		"\x2\x2kl\x3\x2\x2\x2lm\a\x4\x2\x2m\x15\x3\x2\x2\x2no\a\x17\x2\x2op\a\x1D"+
		"\x2\x2pq\x5\x1A\xE\x2qr\a\x1E\x2\x2ru\x5\x4\x3\x2st\a\x18\x2\x2tv\x5\x4"+
		"\x3\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2v\x17\x3\x2\x2\x2wx\a\x19\x2\x2xy\a"+
		"\x1D\x2\x2yz\x5\x1A\xE\x2z{\a\x1E\x2\x2{|\x5\x4\x3\x2|\x19\x3\x2\x2\x2"+
		"}~\b\xE\x1\x2~\x7F\a\x1D\x2\x2\x7F\x80\x5\x1A\xE\x2\x80\x81\a\x1E\x2\x2"+
		"\x81\x89\x3\x2\x2\x2\x82\x83\a\n\x2\x2\x83\x89\x5\x1A\xE\x6\x84\x85\a"+
		"\x15\x2\x2\x85\x89\x5\x1A\xE\x5\x86\x89\x5\x1E\x10\x2\x87\x89\a(\x2\x2"+
		"\x88}\x3\x2\x2\x2\x88\x82\x3\x2\x2\x2\x88\x84\x3\x2\x2\x2\x88\x86\x3\x2"+
		"\x2\x2\x88\x87\x3\x2\x2\x2\x89\xB0\x3\x2\x2\x2\x8A\x8B\f\x12\x2\x2\x8B"+
		"\x8C\a\v\x2\x2\x8C\xAF\x5\x1A\xE\x13\x8D\x8E\f\x11\x2\x2\x8E\x8F\a\f\x2"+
		"\x2\x8F\xAF\x5\x1A\xE\x12\x90\x91\f\x10\x2\x2\x91\x92\a\r\x2\x2\x92\xAF"+
		"\x5\x1A\xE\x11\x93\x94\f\xF\x2\x2\x94\x95\a\t\x2\x2\x95\xAF\x5\x1A\xE"+
		"\x10\x96\x97\f\xE\x2\x2\x97\x98\a\n\x2\x2\x98\xAF\x5\x1A\xE\xF\x99\x9A"+
		"\f\r\x2\x2\x9A\x9B\a\x13\x2\x2\x9B\xAF\x5\x1A\xE\xE\x9C\x9D\f\f\x2\x2"+
		"\x9D\x9E\a\x11\x2\x2\x9E\xAF\x5\x1A\xE\r\x9F\xA0\f\v\x2\x2\xA0\xA1\a\x12"+
		"\x2\x2\xA1\xAF\x5\x1A\xE\f\xA2\xA3\f\n\x2\x2\xA3\xA4\a\x14\x2\x2\xA4\xAF"+
		"\x5\x1A\xE\v\xA5\xA6\f\t\x2\x2\xA6\xA7\a\xF\x2\x2\xA7\xAF\x5\x1A\xE\n"+
		"\xA8\xA9\f\b\x2\x2\xA9\xAA\a\x10\x2\x2\xAA\xAF\x5\x1A\xE\t\xAB\xAC\f\a"+
		"\x2\x2\xAC\xAD\a\xE\x2\x2\xAD\xAF\x5\x1A\xE\b\xAE\x8A\x3\x2\x2\x2\xAE"+
		"\x8D\x3\x2\x2\x2\xAE\x90\x3\x2\x2\x2\xAE\x93\x3\x2\x2\x2\xAE\x96\x3\x2"+
		"\x2\x2\xAE\x99\x3\x2\x2\x2\xAE\x9C\x3\x2\x2\x2\xAE\x9F\x3\x2\x2\x2\xAE"+
		"\xA2\x3\x2\x2\x2\xAE\xA5\x3\x2\x2\x2\xAE\xA8\x3\x2\x2\x2\xAE\xAB\x3\x2"+
		"\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1"+
		"\x1B\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\t\x2\x2\x2\xB4\x1D\x3\x2"+
		"\x2\x2\xB5\xB6\t\x3\x2\x2\xB6\x1F\x3\x2\x2\x2\xF#/\x39\x43\x45R_\x63j"+
		"u\x88\xAE\xB0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab7
